#from src import EKFCore
import autograd.numpy as np
import src
import unittest
from numpy.testing import assert_array_equal, assert_array_almost_equal

# State is defined at
# [x, y,z, vx, vy, vz, ax, ay, az, beta_x, beta_y, beta_z]

class TestEKFConvergence(unittest.TestCase):


    def test_x_prediction(self):
        #initial state just x and v and the init file initializes the rest
        x0 = np.array([-6.291282146358055e6,
            -1.6626488883220146e6,
            -2.2161533651363864e6,
        -2394.9723284619768,
        -540.1536627486031,
        7206.153483511754,
        ])

        EKF_test = src.EKF(x0)

        #julia solution
        #from julia

        x_pred_julia = np.array([-6.293673255822676e6, -1.6631880211332107e6, -2.208945848782446e6, -2387.2461050264865, -538.111847614456, 7208.877747552909, 0.0, 0.0, 0.0, 0.001, 0.001, 0.001])
        
        #timestep 1 second
        x_pred, F_pred = EKF_test.predict(1.0)   

        assert_array_almost_equal(x_pred, x_pred_julia, decimal=5)

    def test_F_prediction(self):
        #initial state just x and v and the init file initializes the rest
        x0 = np.array([-6.291282146358055e6,
            -1.6626488883220146e6,
            -2.2161533651363864e6,
        -2394.9723284619768,
        -540.1536627486031,
        7206.153483511754,
        ])

        EKF_test = src.EKF(x0)


        #julia solution
        #from julia
        gps_measurement = np.array([-6.29367e6, -1.66319e6, -2.20896])

        F_pred_julia = np.array([[-5.773510947894843, -4.708445777821786e-6, -6.2973928977911805e-6, -1.6525101129891864e-5, -4.708993980542986e-6, -6.294135471501665e-6, -2.1626518215304894e-8, -1.4700763600858682e-15, -1.967142908639748e-15, 0.0, 0.0, 0.0],
                         [0.0, -5.773502661717602, -1.6642267362436275e-6, -4.709021193190819e-6, 4.9408018701953965e-8, -1.6633599461150017e-6, 1.616693592222877e-14, -2.162654408020546e-8, -5.193811608353664e-16, 0.0, 0.0, 0.0],
                         [0.0, 0.0, -5.773503142558437, -6.294634957209228e-6, -1.6634756634176838e-6, -9.097273245354497e-7, 2.162192536687582e-14, 5.714560524855416e-15, -2.1626542572654357e-8, 0.0, 0.0, 0.0],
                         [0.0, 0.0, 0.0, -0.005795087792919094, 4.714378351446425e-9, 6.302016174757023e-9, -4.308475821732716e-5, 1.1715462054756072e-11, 1.566112157714078e-11, 0.0, 0.0, 0.0],
                         [0.0, 0.0, 0.0, 0.0, -0.00579509609002459, 1.6662109456630355e-9, -2.3334593137246215e-11, -4.3084737767635534e-5, 4.140193753632584e-12, 0.0, 0.0, 0.0],
                         [0.0, 0.0, 0.0, 0.0, 0.0, -0.005795095603908201, -3.119373317644999e-11, -8.2478555146135e-12, -4.308473897315635e-5, 0.0, 0.0, 0.0],
                         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0004976938294223952, 1.0058531692429829e-12, 1.3446373125506606e-12, 0.0, 0.0, 0.0],
                         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0004976938311927004, 3.555953502798476e-13, 0.0, 0.0, 0.0],
                         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00049769383108834, 0.0, 0.0, 0.0],
                         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00040249223594996216, 0.0, 0.0],
                         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00040249223594996216, 0.0],
                         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00040249223594996216]])


        x_pred, F_pred = EKF_test.predict(1.0) 

        assert_array_almost_equal(F_pred, F_pred_julia, decimal=6)  



    def test_innovation(self):
        
        x0 = np.array([-6.291282146358055e6,
            -1.6626488883220146e6,
            -2.2161533651363864e6,
        -2394.9723284619768,
        -540.1536627486031,
        7206.153483511754,
        ])

        EKF_test = src.EKF(x0)

        julia_innov = np.array([5.06666368432343, -3.6161333185154945, -16.308974961284548])

        gps_measurement = np.array([-6.293668189158992e6, -1.6631916372665293e6, -2.208962157757407e6])

        x_pred, F_pred = EKF_test.predict(1.0) 

        Z,C = EKF_test.innovation(gps_measurement, x_pred, F_pred)

        assert_array_almost_equal(Z, julia_innov, decimal=5)


    def test_kalman_gain(self): 

        x0 = np.array([-6.291282146358055e6,
            -1.6626488883220146e6,
            -2.2161533651363864e6,
        -2394.9723284619768,
        -540.1536627486031,
        7206.153483511754,
        ])

        EKF_test = src.EKF(x0)

        gps_measurement = np.array([-6.293668189158992e6, -1.6631916372665293e6, -2.208962157757407e6])

        x_pred, F_pred = EKF_test.predict(1.0) 
        Z,C = EKF_test.innovation(gps_measurement, x_pred, F_pred)

        L_julia = np.array([[0.500000714989708, 2.0388164456108966e-7, 2.7268506068485437e-7], [2.0388164456108985e-7, 0.4999999973865244, 7.206323712797896e-8], [2.726850606848542e-7, 7.206323712797884e-8, 0.5000000390286474], [1.4311152742674988e-6, 4.0781370301393563e-7, 5.451322173122465e-7], [4.078107645192895e-7, -4.278714407638956e-9, 1.4406144010047734e-7], [5.450880196116732e-7, 1.4405140780892948e-7, 7.878501539230666e-8], [1.8729114169849027e-9, -6.363940235780405e-16, -8.510854002612686e-16], [-6.363931062040608e-16, 1.8729136569519615e-9, -2.249597787963259e-16], [-8.510716021002248e-16, -2.2495664679662433e-16, 1.8729135263939327e-9], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]])

        L = EKF_test.kalman_gain(F_pred, C)

        assert_array_almost_equal(L, L_julia, decimal=5)


    def test_x_update(self): 

        x0 = np.array([-6.291282146358055e6,
            -1.6626488883220146e6,
            -2.2161533651363864e6,
        -2394.9723284619768,
        -540.1536627486031,
        7206.153483511754,
        ])

        EKF_test = src.EKF(x0)

        gps_measurement = np.array([-6.293668189158992e6, -1.6631916372665293e6, -2.208962157757407e6])

        #pass in measurement and timestep
        EKF_test.update(gps_measurement, 1.0)


        #julia solution
        x_update = np.array([-6.293670722492396e6,
                            -1.6631898292000028e6,
                            -2.208954003269442e6,
                            -2387.246108140763,
                            -538.1118478822381,
                            7208.877748508874,
                            9.489428442008259e-9,
                            -6.772705033133127e-9,
                            -3.054530330523015e-8,
                            0.001,
                            0.001,
                            0.001])

        F_update = np.array([[4.082485823570845, 1.6646854667479677e-6, 2.2264626052952507e-6, 1.168499892887759e-5, 3.329758568212964e-6, 4.450621861028279e-6, 1.529224674969163e-8, -5.196124238241886e-15, -6.948965563958073e-15, 0.0, 0.0, 0.0], 
                             [0.0, 4.082482893968822, 5.883929609245209e-7, 3.3297801856559214e-6, -3.493691468967873e-8, 1.176173007813251e-6, -1.1431747847945775e-14, 1.5292276012710587e-8, -1.8367605009335516e-15, 0.0, 0.0, 0.0], 
                             [0.0, 0.0, 4.082483063971763, 4.450978889621552e-6, 1.176254876033983e-6, 6.432743351036854e-7, -1.5289009452520364e-14, -4.040804340919728e-15, 1.5292274309909076e-8, 0.0, 0.0, 0.0], 
                             [0.0, 0.0, 0.0, -0.005795087792919094, 4.714378351446425e-9, 6.302016174757023e-9, -4.308475821732716e-5, 1.1715462054756072e-11, 1.566112157714078e-11, 0.0, 0.0, 0.0], 
                             [0.0, 0.0, 0.0, 0.0, 0.00579509609002459, -1.6662109456630355e-9, 2.3334593137246215e-11, 4.3084737767635534e-5, -4.140193753632584e-12, 0.0, 0.0, 0.0], 
                             [0.0, 0.0, 0.0, 0.0, 0.0, 0.005795095603908201, 3.119373317644999e-11, 8.2478555146135e-12, 4.308473897315635e-5, 0.0, 0.0, 0.0], 
                             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0004976938294223952, -1.0058531692429829e-12, -1.3446373125506606e-12, 0.0, 0.0, 0.0], 
                             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0004976938311927004, -3.555953502798476e-13, 0.0, 0.0, 0.0], 
                             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00049769383108834, 0.0, 0.0, 0.0], 
                             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00040249223594996216, 0.0, 0.0], 
                             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00040249223594996216, 0.0], 
                             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00040249223594996216]])

        assert_array_almost_equal(EKF_test.x, x_update, decimal=5)


    def test_F_update(self): 

        x0 = np.array([-6.291282146358055e6,
            -1.6626488883220146e6,
            -2.2161533651363864e6,
        -2394.9723284619768,
        -540.1536627486031,
        7206.153483511754,
        ])

        EKF_test = src.EKF(x0)

        gps_measurement = np.array([-6.293668189158992e6, -1.6631916372665293e6, -2.208962157757407e6])

        #pass in measurement and timestep
        EKF_test.update(gps_measurement, 1.0)


        #julia solution
        F_update = np.array([[4.082485823570845, 1.6646854667479677e-6, 2.2264626052952507e-6, 1.168499892887759e-5, 3.329758568212964e-6, 4.450621861028279e-6, 1.529224674969163e-8, -5.196124238241886e-15, -6.948965563958073e-15, 0.0, 0.0, 0.0], 
                             [0.0, 4.082482893968822, 5.883929609245209e-7, 3.3297801856559214e-6, -3.493691468967873e-8, 1.176173007813251e-6, -1.1431747847945775e-14, 1.5292276012710587e-8, -1.8367605009335516e-15, 0.0, 0.0, 0.0], 
                             [0.0, 0.0, 4.082483063971763, 4.450978889621552e-6, 1.176254876033983e-6, 6.432743351036854e-7, -1.5289009452520364e-14, -4.040804340919728e-15, 1.5292274309909076e-8, 0.0, 0.0, 0.0], 
                             [0.0, 0.0, 0.0, -0.005795087792919094, 4.714378351446425e-9, 6.302016174757023e-9, -4.308475821732716e-5, 1.1715462054756072e-11, 1.566112157714078e-11, 0.0, 0.0, 0.0], 
                             [0.0, 0.0, 0.0, 0.0, 0.00579509609002459, -1.6662109456630355e-9, 2.3334593137246215e-11, 4.3084737767635534e-5, -4.140193753632584e-12, 0.0, 0.0, 0.0], 
                             [0.0, 0.0, 0.0, 0.0, 0.0, 0.005795095603908201, 3.119373317644999e-11, 8.2478555146135e-12, 4.308473897315635e-5, 0.0, 0.0, 0.0], 
                             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0004976938294223952, -1.0058531692429829e-12, -1.3446373125506606e-12, 0.0, 0.0, 0.0], 
                             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0004976938311927004, -3.555953502798476e-13, 0.0, 0.0, 0.0], 
                             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00049769383108834, 0.0, 0.0, 0.0], 
                             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00040249223594996216, 0.0, 0.0], 
                             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00040249223594996216, 0.0], 
                             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00040249223594996216]])

        assert_array_almost_equal(EKF_test.F, F_update, decimal=2)



if __name__ == '__main__':
    unittest.main()
        